/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Answer: { // root type
    answer: string; // String!
    id: number; // Int!
  }
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: {};
  Query: {};
  Question: { // root type
    correctAnswer: string; // String!
    id: number; // Int!
    question: string; // String!
    weight: string; // String!
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Answer: { // field return type
    answer: string; // String!
    id: number; // Int!
    question: NexusGenRootTypes['Question'] | null; // Question
  }
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    deleteAnswer: NexusGenRootTypes['Answer'] | null; // Answer
    deleteQuestion: NexusGenRootTypes['Question'] | null; // Question
    deleteUser: NexusGenRootTypes['User']; // User!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    postAnswer: NexusGenRootTypes['Answer']; // Answer!
    postQuestion: NexusGenRootTypes['Question']; // Question!
    registerUser: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    updateAnswer: NexusGenRootTypes['Answer'] | null; // Answer
    updateQuestion: NexusGenRootTypes['Question'] | null; // Question
    updateUser: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    allAnswers: NexusGenRootTypes['Answer'][]; // [Answer!]!
    allQuestions: NexusGenRootTypes['Question'][]; // [Question!]!
    allUsers: NexusGenRootTypes['User'][]; // [User!]!
    getOneUser: NexusGenRootTypes['User'] | null; // User
    getSingleQuestion: NexusGenRootTypes['Question'] | null; // Question
    readAnswer: NexusGenRootTypes['Answer'] | null; // Answer
  }
  Question: { // field return type
    answers: NexusGenRootTypes['Answer'][]; // [Answer!]!
    correctAnswer: string; // String!
    id: number; // Int!
    postedBy: NexusGenRootTypes['User'] | null; // User
    question: string; // String!
    weight: string; // String!
  }
  User: { // field return type
    QuestionsAsked: NexusGenRootTypes['Question'][]; // [Question!]!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Answer: { // field return type name
    answer: 'String'
    id: 'Int'
    question: 'Question'
  }
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    deleteAnswer: 'Answer'
    deleteQuestion: 'Question'
    deleteUser: 'User'
    login: 'AuthPayload'
    postAnswer: 'Answer'
    postQuestion: 'Question'
    registerUser: 'AuthPayload'
    updateAnswer: 'Answer'
    updateQuestion: 'Question'
    updateUser: 'User'
  }
  Query: { // field return type name
    allAnswers: 'Answer'
    allQuestions: 'Question'
    allUsers: 'User'
    getOneUser: 'User'
    getSingleQuestion: 'Question'
    readAnswer: 'Answer'
  }
  Question: { // field return type name
    answers: 'Answer'
    correctAnswer: 'String'
    id: 'Int'
    postedBy: 'User'
    question: 'String'
    weight: 'String'
  }
  User: { // field return type name
    QuestionsAsked: 'Question'
    email: 'String'
    id: 'Int'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteAnswer: { // args
      id: number; // Int!
    }
    deleteQuestion: { // args
      id: number; // Int!
    }
    deleteUser: { // args
      id: number; // Int!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    postAnswer: { // args
      answer: string; // String!
      id: number; // Int!
    }
    postQuestion: { // args
      correctAnswer: string; // String!
      question: string; // String!
      weight: string; // String!
    }
    registerUser: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
    updateAnswer: { // args
      answer: string; // String!
      id: number; // Int!
    }
    updateQuestion: { // args
      correctAnswer: string; // String!
      id: number; // Int!
      question: string; // String!
      weight: string; // String!
    }
    updateUser: { // args
      email: string; // String!
      id: number; // Int!
      name: string; // String!
    }
  }
  Query: {
    getOneUser: { // args
      id: number; // Int!
    }
    getSingleQuestion: { // args
      id: number; // Int!
    }
    readAnswer: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}